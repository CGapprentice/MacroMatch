// src/components/SpotifyIntegration.jsx
import React, { useState, useEffect } from 'react';

const SPOTIFY_CONFIG = {
  CLIENT_ID: import.meta.env.VITE_SPOTIFY_CLIENT_ID, 
  REDIRECT_URI: import.meta.env.VITE_SPOTIFY_REDIRECT_URI,
  SCOPES: [
    'user-read-private',
    'user-read-email',
    'playlist-modify-public',
    'playlist-modify-private'
  ].join(' ')
};

export const useSpotify = () => {
  const [accessToken, setAccessToken] = useState(null);
  const [user, setSpotifyUser] = useState(null);
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    // Check for token in URL hash (after redirect)
    const hash = window.location.hash.substring(1);
    const params = new URLSearchParams(hash);
    const token = params.get('access_token');
    
    if (token) {
      setAccessToken(token);
      window.location.hash = ''; // Clear hash
      getSpotifyUser(token);
    }

    // Check for stored token
    const storedToken = localStorage.getItem('spotify_access_token');
    if (storedToken) {
      setAccessToken(storedToken);
      getSpotifyUser(storedToken);
    }
  }, []);

  const getSpotifyUser = async (token) => {
    try {
      const response = await fetch('https://api.spotify.com/v1/me', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const userData = await response.json();
        setSpotifyUser(userData);
        setIsConnected(true);
        localStorage.setItem('spotify_access_token', token);
      } else {
        // Token expired or invalid
        localStorage.removeItem('spotify_access_token');
        setAccessToken(null);
        setIsConnected(false);
      }
    } catch (error) {
      console.error('Error getting Spotify user:', error);
    }
  };

  const connectSpotify = () => {
    const authUrl = `https://accounts.spotify.com/authorize?` +
      `client_id=${SPOTIFY_CONFIG.CLIENT_ID}&` +
      `response_type=token&` +
      `redirect_uri=${encodeURIComponent(SPOTIFY_CONFIG.REDIRECT_URI)}&` +
      `scope=${encodeURIComponent(SPOTIFY_CONFIG.SCOPES)}`;
    
    window.location.href = authUrl;
  };

  const generatePlaylist = async (workoutType, duration, fitnessLevel) => {
    if (!accessToken || !user) {
      throw new Error('Not connected to Spotify');
    }

    // Create playlist
    const playlistName = `MacroMatch ${workoutType} - ${duration}min (${fitnessLevel})`;
    const playlist = await createPlaylist(playlistName);
    
    // Get recommendations
    const tracks = await getRecommendations(workoutType, duration);
    
    // Add tracks to playlist
    await addTracksToPlaylist(playlist.id, tracks);
    
    return playlist;
  };

  const createPlaylist = async (name) => {
    const response = await fetch(`https://api.spotify.com/v1/users/${user.id}/playlists`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name,
        description: 'Generated by MacroMatch Fitness Calculator',
        public: false
      })
    });

    if (!response.ok) {
      throw new Error('Failed to create playlist');
    }

    return await response.json();
  };

  const getRecommendations = async (workoutType, duration) => {
    const musicProfile = getMusicProfile(workoutType);
    const targetTracks = Math.ceil(duration / 3.5); // ~3.5 min average song

    const params = new URLSearchParams({
      limit: Math.min(targetTracks, 50),
      seed_genres: musicProfile.genres.slice(0, 3).join(','),
      target_energy: musicProfile.energy,
      target_tempo: musicProfile.tempo,
      target_danceability: musicProfile.danceability,
      min_popularity: 30
    });

    const response = await fetch(`https://api.spotify.com/v1/recommendations?${params}`, {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });

    if (!response.ok) {
      throw new Error('Failed to get recommendations');
    }

    const data = await response.json();
    return data.tracks;
  };

  const addTracksToPlaylist = async (playlistId, tracks) => {
    const trackUris = tracks.map(track => track.uri);
    
    const response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ uris: trackUris })
    });

    if (!response.ok) {
      throw new Error('Failed to add tracks to playlist');
    }
  };

  return {
    isConnected,
    user,
    connectSpotify,
    generatePlaylist
  };
};

// Helper function for music profiles
const getMusicProfile = (workoutType) => {
  const profiles = {
    cardio: {
      energy: 0.8,
      tempo: 150,
      danceability: 0.7,
      genres: ['pop', 'dance', 'electronic']
    },
    strength: {
      energy: 0.7,
      tempo: 120,
      danceability: 0.5,
      genres: ['rock', 'hip-hop', 'metal']
    },
    flexibility: {
      energy: 0.3,
      tempo: 80,
      danceability: 0.4,
      genres: ['ambient', 'chill', 'acoustic']
    },
    mixed: {
      energy: 0.6,
      tempo: 130,
      danceability: 0.6,
      genres: ['pop', 'rock', 'electronic']
    }
  };

  return profiles[workoutType] || profiles.mixed;
};

export default useSpotify;